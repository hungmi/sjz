<div id="pdf-previewer" class="col-xs-12 mb-5">
	<h4 id="pdf-btns-fixed-hint" class="mt-5 text-danger">以下预览可能会出现格式、内容与原始档案不同的情况，请以原始档案为主。</h4>
	<div id="pdf-btns">
	  <button id="prev" class="btn btn-default btn-sm"><i class="fa fa-arrow-left"></i></button>
	  <button id="next" class="btn btn-default btn-sm"><i class="fa fa-arrow-right"></i></button>
	  &nbsp; &nbsp;
	  <span>頁面: <span id="page_num"></span> / <span id="page_count"></span></span>
	</div>
	<canvas style="max-width: 100%;" id="pdf-canvas" data-url="<%= OssService.new.download_url(doc.oss_key) %>"></canvas>
</div>

<script type="text/javascript">
	$(document).on("scroll", function(){
		if (window.pageYOffset > $("#pdf-btns-fixed-hint").offset().top) {
			$("#pdf-btns").addClass("fixed")
			$("#pdf-btns").attr("style", "right:" + $("#pdf-btns-fixed-hint").offset().left.toString() + "px;")
		} else {
			$("#pdf-btns").removeClass("fixed")
		}
	})

	var url = "<%= asset_url '1.pdf' %>"
	PDFJS.workerSrc = "<%= asset_path 'pdf.worker.js' %>";

	var pdfDoc = null,
	    pageNum = 1,
	    pageRendering = false,
	    pageNumPending = null,
	    scale = 1.5,
	    canvas = document.getElementById('pdf-canvas'),
	    ctx = canvas.getContext('2d');

	/**
	 * Get page info from document, resize canvas accordingly, and render page.
	 * @param num Page number.
	 */
	function renderPage(num) {
	  pageRendering = true;
	  // Using promise to fetch the page
	  pdfDoc.getPage(num).then(function(page) {
	    var viewport = page.getViewport(scale);
	    canvas.height = viewport.height;
	    canvas.width = viewport.width;

	    // Render PDF page into canvas context
	    var renderContext = {
	      canvasContext: ctx,
	      viewport: viewport
	    };
	    var renderTask = page.render(renderContext);

	    // Wait for rendering to finish
	    renderTask.promise.then(function() {
	      pageRendering = false;
	      if (pageNumPending !== null) {
	        // New page rendering is pending
	        renderPage(pageNumPending);
	        pageNumPending = null;
	      }
	    });
	  });

	  // Update page counters
	  document.getElementById('page_num').textContent = pageNum;
	}

	/**
	 * If another page rendering in progress, waits until the rendering is
	 * finised. Otherwise, executes rendering immediately.
	 */
	function queueRenderPage(num) {
	  if (pageRendering) {
	    pageNumPending = num;
	  } else {
	    renderPage(num);
	  }
	}

	/**
	 * Displays previous page.
	 */
	function onPrevPage() {
	  if (pageNum <= 1) {
	    return;
	  }
	  pageNum--;
	  queueRenderPage(pageNum);
	}
	document.getElementById('prev').addEventListener('click', onPrevPage);

	/**
	 * Displays next page.
	 */
	function onNextPage() {
	  if (pageNum >= pdfDoc.numPages) {
	    return;
	  }
	  pageNum++;
	  queueRenderPage(pageNum);
	}
	document.getElementById('next').addEventListener('click', onNextPage);

	/**
	 * Asynchronously downloads PDF.
	 */
	PDFJS.getDocument(url).then(function(pdfDoc_) {
	  pdfDoc = pdfDoc_;
	  document.getElementById('page_count').textContent = pdfDoc.numPages;

	  // Initial/first page rendering
	  renderPage(pageNum);
	});
</script>